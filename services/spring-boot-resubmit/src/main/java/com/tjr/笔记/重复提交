自定义注解+Aop实现
我们通过获取用户ip及访问的接口来判断他是否重复提交，假如这个ip在一段时间内容多次访问这个接口，我们则认为是重复提交，我们将重复提交的请求直接处理即可，不让访问目标接口。

自定义注解
@Target({ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
@Documented
public @interface NoRepeatSubmit {

    /**
     * 默认1s钟以内算重复提交
     * @return
     */
    long timeout() default 1;
}
Aop处理逻辑
我们将ip+接口地址作为key，随机生成UUID作为value，存入redis。每次请求进来，根据key查询redis，如果存在则说明是重复提交，抛出异常，如果不存在，则是正常提交，将key存入redis。

@Aspect
@Component
public class NoRepeatSubmitAop {

    @Autowired
    private RedisService redisUtils;

    /**
     *     定义切入点
     */
    @Pointcut("@annotation(NoRepeatSubmit)")
    public void noRepeat() {}

    /**
     *     前置通知：在连接点之前执行的通知
     * @param point
     * @throws Throwable
     */
    @Before("noRepeat()")
    public void before(JoinPoint point) throws Exception{
        // 接收到请求，记录请求内容
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        Assert.notNull(request, "request can not null");

        // 此处可以用token或者JSessionId
        String token = IpUtils.getIpAddr(request);
        String path = request.getServletPath();
        String key = getKey(token, path);
        String clientId = getClientId();
        List<Object> lGet = redisUtils.lGet(key, 0, -1);
        // 获取注解
        MethodSignature signature = (MethodSignature) point.getSignature();
        Method method = signature.getMethod();
        NoRepeatSubmit annotation = method.getAnnotation(NoRepeatSubmit.class);
        long timeout = annotation.timeout();
        boolean isSuccess = false;
        if (lGet.size()==0 || lGet == null) {
            isSuccess = redisUtils.lSet(key, clientId, timeout);
        }
        if (!isSuccess) {
            // 获取锁失败，认为是重复提交的请求
            redisUtils.lSet(key, clientId, timeout);
            throw new Exception("不可以重复提交");
        }

    }

    private String getKey(String token, String path) {
        return token + path;
    }

    private String getClientId() {
        return UUID.randomUUID().toString();
    }
}
提供接口用来测试
在接口上添加上我们自定义的注解@NoRepeatSubmit

@RequestMapping("/test")
@NoRepeatSubmit
public String tt(HttpServletRequest request) {

    return "1";
}
测试